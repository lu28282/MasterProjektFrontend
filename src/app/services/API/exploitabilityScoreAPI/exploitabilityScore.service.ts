import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { StorageService } from '../../ServiceStorges/storge.service';

@Injectable({
  providedIn: 'root',
})
export class ExploitabilityScoreAPIService {
  constructor(private http: HttpClient, private storage: StorageService) {}

  getExploitabilityScore() {
    // this.storage.keys().then((res) => {
    //   if (res.find((myKey) => myKey === 'jakobTest')) {
    //     this.storage.remove('jakobTest');
    //   }
    // });
    //let wholeUrl = 'http://localhost:8080/technologies?' + url;

    this.http
      .get(
        'http://localhost:8080/exploitabilityScore?startDate=2019_01&endDate=2019_01&lowerLimit=1.0&upperLimit=2.9',
        { responseType: 'text' as 'json' }
      )
      .subscribe((res) => {
          console.log("Jaaaakob", res);
          
        let date = [];
        let amount = [];
        const text = 'laaa';
        if (res) {
          let domainVulner = [];
          let amountOfArray = res.toString().split(',');

          for (let i = 0; i < amountOfArray.length; i++) {
            let currentArray = amountOfArray[i]
              .replace('{', '')
              .replace('}', '')
              .replace('"', '')
              .replace('"', '')
              .split(':');

            const idomainsVulnerability = {
              date: new Date(currentArray[0]),
              amount: currentArray[1],
            };

            domainVulner.push(idomainsVulnerability);
          }
          domainVulner.sort((a, b) => a.date - b.date);
          for (let i = 0; i < domainVulner.length; i++) {
            let month = null;
            let year = domainVulner[i].date.getFullYear();
            if (domainVulner[i].date.getMonth() + 1 < 10) {
              month = (0).toString() + (domainVulner[i].date.getMonth() + 1);
            } else {
              month = domainVulner[i].date.getMonth() + 1;
            }
            //let month = domainVulner[i].date.getMonth()+1;
            date.push(year + '-' + month);
            amount.push(domainVulner[i].amount);
          }
          //return [date, amount, text];
          //console.log("Testen",date, amount, text);
          const myReturn = [date, amount, text];
  
          this.storage.set('jakobTest', myReturn);
        }
        if(res) {

        }

      });
  }
}
